/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/accounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing user accounts.
         *     All accounts are scoped to the authenticated user. */
        get: operations["v1_accounts_list"];
        put?: never;
        /** @description ViewSet for managing user accounts.
         *     All accounts are scoped to the authenticated user. */
        post: operations["v1_accounts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing user accounts.
         *     All accounts are scoped to the authenticated user. */
        get: operations["v1_accounts_retrieve"];
        /** @description ViewSet for managing user accounts.
         *     All accounts are scoped to the authenticated user. */
        put: operations["v1_accounts_update"];
        post?: never;
        /** @description Delete an account with transaction check */
        delete: operations["v1_accounts_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for managing user accounts.
         *     All accounts are scoped to the authenticated user. */
        patch: operations["v1_accounts_partial_update"];
        trace?: never;
    };
    "/api/v1/accounts/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get account summary statistics */
        get: operations["v1_accounts_summary_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Authenticate user and return JWT tokens. */
        post: operations["v1_auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refresh JWT access token using refresh token. */
        post: operations["v1_auth_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Register a new user account. */
        post: operations["v1_auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/budgets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing budgets.
         *     All budgets are scoped to the authenticated user. */
        get: operations["v1_budgets_list"];
        put?: never;
        /** @description Create budget with proper serializer */
        post: operations["v1_budgets_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/budgets/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing budgets.
         *     All budgets are scoped to the authenticated user. */
        get: operations["v1_budgets_retrieve"];
        /** @description ViewSet for managing budgets.
         *     All budgets are scoped to the authenticated user. */
        put: operations["v1_budgets_update"];
        post?: never;
        /** @description ViewSet for managing budgets.
         *     All budgets are scoped to the authenticated user. */
        delete: operations["v1_budgets_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for managing budgets.
         *     All budgets are scoped to the authenticated user. */
        patch: operations["v1_budgets_partial_update"];
        trace?: never;
    };
    "/api/v1/budgets/current/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current active budgets */
        get: operations["v1_budgets_current_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/budgets/over_budget/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get budgets that are over their limit */
        get: operations["v1_budgets_over_budget_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/budgets/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get budget summary statistics */
        get: operations["v1_budgets_summary_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing transaction categories.
         *     All categories are scoped to the authenticated user. */
        get: operations["v1_categories_list"];
        put?: never;
        /** @description ViewSet for managing transaction categories.
         *     All categories are scoped to the authenticated user. */
        post: operations["v1_categories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing transaction categories.
         *     All categories are scoped to the authenticated user. */
        get: operations["v1_categories_retrieve"];
        /** @description ViewSet for managing transaction categories.
         *     All categories are scoped to the authenticated user. */
        put: operations["v1_categories_update"];
        post?: never;
        /** @description Delete a category with validation */
        delete: operations["v1_categories_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for managing transaction categories.
         *     All categories are scoped to the authenticated user. */
        patch: operations["v1_categories_partial_update"];
        trace?: never;
    };
    "/api/v1/categories/by_type/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get categories grouped by type (income/expense) */
        get: operations["v1_categories_by_type_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories/tree/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get categories organized as a tree structure */
        get: operations["v1_categories_tree_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/goals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing financial goals.
         *     All goals are scoped to the authenticated user. */
        get: operations["v1_goals_list"];
        put?: never;
        /** @description Create goal with proper serializer */
        post: operations["v1_goals_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/goals/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing financial goals.
         *     All goals are scoped to the authenticated user. */
        get: operations["v1_goals_retrieve"];
        /** @description ViewSet for managing financial goals.
         *     All goals are scoped to the authenticated user. */
        put: operations["v1_goals_update"];
        post?: never;
        /** @description ViewSet for managing financial goals.
         *     All goals are scoped to the authenticated user. */
        delete: operations["v1_goals_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for managing financial goals.
         *     All goals are scoped to the authenticated user. */
        patch: operations["v1_goals_partial_update"];
        trace?: never;
    };
    "/api/v1/goals/{id}/update_progress/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Update goal progress by adding/subtracting amount */
        post: operations["v1_goals_update_progress_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/goals/active/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get active goals */
        get: operations["v1_goals_active_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/goals/completed/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get completed goals */
        get: operations["v1_goals_completed_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/goals/near_target/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get goals that are close to their target (>80% progress) */
        get: operations["v1_goals_near_target_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/goals/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get goal summary statistics */
        get: operations["v1_goals_summary_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing financial transactions.
         *     All transactions are scoped to the authenticated user. */
        get: operations["v1_transactions_list"];
        put?: never;
        /** @description Create transaction with proper serializer */
        post: operations["v1_transactions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/transactions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for managing financial transactions.
         *     All transactions are scoped to the authenticated user. */
        get: operations["v1_transactions_retrieve"];
        /** @description ViewSet for managing financial transactions.
         *     All transactions are scoped to the authenticated user. */
        put: operations["v1_transactions_update"];
        post?: never;
        /** @description ViewSet for managing financial transactions.
         *     All transactions are scoped to the authenticated user. */
        delete: operations["v1_transactions_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for managing financial transactions.
         *     All transactions are scoped to the authenticated user. */
        patch: operations["v1_transactions_partial_update"];
        trace?: never;
    };
    "/api/v1/transactions/recent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get recent transactions (last 30 days) */
        get: operations["v1_transactions_recent_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/transactions/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get transaction summary statistics */
        get: operations["v1_transactions_summary_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/change-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Change user password. */
        post: operations["v1_user_change_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/delete-account/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete user account and all associated data. */
        delete: operations["v1_user_delete_account_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current user profile information. */
        get: operations["v1_user_profile_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/profile/update/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update current user profile information. */
        put: operations["v1_user_profile_update_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Serializer for Account model with user ownership validation. */
        Account: {
            readonly id: number;
            name: string;
            account_type: components["schemas"]["AccountTypeEnum"];
            readonly account_type_display: string;
            /** Format: decimal */
            balance?: string;
            is_active?: boolean;
            readonly owner: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `checking` - Checking
         *     * `savings` - Savings
         *     * `credit` - Credit Card
         *     * `investment` - Investment
         *     * `cash` - Cash
         *     * `loan` - Loan
         *     * `other` - Other
         * @enum {string}
         */
        AccountTypeEnum: "checking" | "savings" | "credit" | "investment" | "cash" | "loan" | "other";
        /** @enum {unknown} */
        BlankEnum: "";
        /** @description Serializer for Budget model with spending tracking. */
        Budget: {
            readonly id: number;
            name: string;
            category: number;
            readonly category_name: string;
            readonly category_full_name: string;
            /** Format: decimal */
            amount: string;
            period?: components["schemas"]["PeriodEnum"];
            readonly period_display: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            /** Format: decimal */
            readonly spent_amount: string;
            /** Format: decimal */
            readonly remaining_amount: string;
            /** Format: double */
            readonly percentage_used: number;
            readonly is_over_budget: boolean;
            is_active?: boolean;
            readonly owner: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /** @description Simplified serializer for budget creation with category ID. */
        BudgetCreate: {
            name: string;
            category_id: number;
            /** Format: decimal */
            amount: string;
            period?: components["schemas"]["PeriodEnum"];
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            is_active?: boolean;
        };
        /** @description Serializer for Category model with hierarchical support. */
        Category: {
            readonly id: number;
            name: string;
            readonly full_name: string;
            category_type?: components["schemas"]["CategoryTypeEnum"];
            readonly category_type_display: string;
            color?: string;
            parent?: number | null;
            readonly parent_name: string;
            readonly subcategories: string;
            is_active?: boolean;
            readonly owner: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `expense` - Expense
         *     * `income` - Income
         * @enum {string}
         */
        CategoryTypeEnum: "expense" | "income";
        /** @description Serializer for Goal model with progress tracking. */
        Goal: {
            readonly id: number;
            name: string;
            description?: string;
            goal_type?: components["schemas"]["GoalTypeEnum"];
            readonly goal_type_display: string;
            /** Format: decimal */
            target_amount: string;
            /** Format: decimal */
            current_amount?: string;
            /** Format: decimal */
            readonly remaining_amount: string;
            /** Format: double */
            readonly progress_percentage: number;
            /** Format: date */
            target_date?: string | null;
            linked_account?: number | null;
            readonly linked_account_name: string;
            is_active?: boolean;
            readonly is_completed: boolean;
            readonly is_goal_reached: boolean;
            /** Format: date-time */
            readonly completed_at: string | null;
            readonly owner: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /** @description Simplified serializer for goal creation with account ID. */
        GoalCreate: {
            name: string;
            description?: string;
            goal_type?: components["schemas"]["GoalTypeEnum"];
            /** Format: decimal */
            target_amount: string;
            /** Format: decimal */
            current_amount?: string;
            /** Format: date */
            target_date?: string | null;
            linked_account_id?: number | null;
            is_active?: boolean;
        };
        /**
         * @description * `savings` - Savings Goal
         *     * `debt` - Debt Payoff
         *     * `investment` - Investment Target
         *     * `purchase` - Purchase Goal
         *     * `emergency` - Emergency Fund
         *     * `other` - Other
         * @enum {string}
         */
        GoalTypeEnum: "savings" | "debt" | "investment" | "purchase" | "emergency" | "other";
        /** @enum {unknown} */
        NullEnum: null;
        PaginatedAccountList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Account"][];
        };
        PaginatedBudgetList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Budget"][];
        };
        PaginatedCategoryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Category"][];
        };
        PaginatedGoalList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Goal"][];
        };
        PaginatedTransactionList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Transaction"][];
        };
        /** @description Serializer for Account model with user ownership validation. */
        PatchedAccount: {
            readonly id?: number;
            name?: string;
            account_type?: components["schemas"]["AccountTypeEnum"];
            readonly account_type_display?: string;
            /** Format: decimal */
            balance?: string;
            is_active?: boolean;
            readonly owner?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description Serializer for Budget model with spending tracking. */
        PatchedBudget: {
            readonly id?: number;
            name?: string;
            category?: number;
            readonly category_name?: string;
            readonly category_full_name?: string;
            /** Format: decimal */
            amount?: string;
            period?: components["schemas"]["PeriodEnum"];
            readonly period_display?: string;
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
            /** Format: decimal */
            readonly spent_amount?: string;
            /** Format: decimal */
            readonly remaining_amount?: string;
            /** Format: double */
            readonly percentage_used?: number;
            readonly is_over_budget?: boolean;
            is_active?: boolean;
            readonly owner?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description Serializer for Category model with hierarchical support. */
        PatchedCategory: {
            readonly id?: number;
            name?: string;
            readonly full_name?: string;
            category_type?: components["schemas"]["CategoryTypeEnum"];
            readonly category_type_display?: string;
            color?: string;
            parent?: number | null;
            readonly parent_name?: string;
            readonly subcategories?: string;
            is_active?: boolean;
            readonly owner?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description Serializer for Goal model with progress tracking. */
        PatchedGoal: {
            readonly id?: number;
            name?: string;
            description?: string;
            goal_type?: components["schemas"]["GoalTypeEnum"];
            readonly goal_type_display?: string;
            /** Format: decimal */
            target_amount?: string;
            /** Format: decimal */
            current_amount?: string;
            /** Format: decimal */
            readonly remaining_amount?: string;
            /** Format: double */
            readonly progress_percentage?: number;
            /** Format: date */
            target_date?: string | null;
            linked_account?: number | null;
            readonly linked_account_name?: string;
            is_active?: boolean;
            readonly is_completed?: boolean;
            readonly is_goal_reached?: boolean;
            /** Format: date-time */
            readonly completed_at?: string | null;
            readonly owner?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description Serializer for Transaction model with related data. */
        PatchedTransaction: {
            readonly id?: number;
            account?: number;
            readonly account_name?: string;
            category?: number | null;
            readonly category_name?: string;
            readonly category_full_name?: string;
            /** Format: decimal */
            amount?: string;
            description?: string;
            /** Format: date */
            date?: string;
            notes?: string;
            transfer_to?: number | null;
            readonly transfer_to_name?: string;
            is_recurring?: boolean;
            recurring_frequency?: (components["schemas"]["RecurringFrequencyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            readonly is_expense?: boolean;
            readonly is_income?: boolean;
            readonly is_transfer?: boolean;
            readonly owner?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /**
         * @description * `monthly` - Monthly
         *     * `quarterly` - Quarterly
         *     * `yearly` - Yearly
         * @enum {string}
         */
        PeriodEnum: "monthly" | "quarterly" | "yearly";
        /**
         * @description * `daily` - Daily
         *     * `weekly` - Weekly
         *     * `monthly` - Monthly
         *     * `yearly` - Yearly
         * @enum {string}
         */
        RecurringFrequencyEnum: "daily" | "weekly" | "monthly" | "yearly";
        /** @description Serializer for Transaction model with related data. */
        Transaction: {
            readonly id: number;
            account: number;
            readonly account_name: string;
            category?: number | null;
            readonly category_name: string;
            readonly category_full_name: string;
            /** Format: decimal */
            amount: string;
            description: string;
            /** Format: date */
            date: string;
            notes?: string;
            transfer_to?: number | null;
            readonly transfer_to_name: string;
            is_recurring?: boolean;
            recurring_frequency?: (components["schemas"]["RecurringFrequencyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            readonly is_expense: boolean;
            readonly is_income: boolean;
            readonly is_transfer: boolean;
            readonly owner: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /** @description Simplified serializer for transaction creation with ID-based relationships. */
        TransactionCreate: {
            account_id: number;
            category_id?: number | null;
            /** Format: decimal */
            amount: string;
            description: string;
            /** Format: date */
            date: string;
            notes?: string;
            transfer_to_id?: number | null;
            is_recurring?: boolean;
            recurring_frequency?: (components["schemas"]["RecurringFrequencyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    v1_accounts_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAccountList"];
                };
            };
        };
    };
    v1_accounts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Account"];
                "application/x-www-form-urlencoded": components["schemas"]["Account"];
                "multipart/form-data": components["schemas"]["Account"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    v1_accounts_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    v1_accounts_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Account"];
                "application/x-www-form-urlencoded": components["schemas"]["Account"];
                "multipart/form-data": components["schemas"]["Account"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    v1_accounts_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_accounts_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAccount"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAccount"];
                "multipart/form-data": components["schemas"]["PatchedAccount"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    v1_accounts_summary_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    v1_auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_auth_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_budgets_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBudgetList"];
                };
            };
        };
    };
    v1_budgets_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BudgetCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["BudgetCreate"];
                "multipart/form-data": components["schemas"]["BudgetCreate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BudgetCreate"];
                };
            };
        };
    };
    v1_budgets_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Budget"];
                };
            };
        };
    };
    v1_budgets_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Budget"];
                "application/x-www-form-urlencoded": components["schemas"]["Budget"];
                "multipart/form-data": components["schemas"]["Budget"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Budget"];
                };
            };
        };
    };
    v1_budgets_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_budgets_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBudget"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBudget"];
                "multipart/form-data": components["schemas"]["PatchedBudget"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Budget"];
                };
            };
        };
    };
    v1_budgets_current_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Budget"];
                };
            };
        };
    };
    v1_budgets_over_budget_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Budget"];
                };
            };
        };
    };
    v1_budgets_summary_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Budget"];
                };
            };
        };
    };
    v1_categories_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCategoryList"];
                };
            };
        };
    };
    v1_categories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/x-www-form-urlencoded": components["schemas"]["Category"];
                "multipart/form-data": components["schemas"]["Category"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    v1_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    v1_categories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/x-www-form-urlencoded": components["schemas"]["Category"];
                "multipart/form-data": components["schemas"]["Category"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    v1_categories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_categories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCategory"];
                "multipart/form-data": components["schemas"]["PatchedCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    v1_categories_by_type_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    v1_categories_tree_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    v1_goals_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGoalList"];
                };
            };
        };
    };
    v1_goals_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoalCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["GoalCreate"];
                "multipart/form-data": components["schemas"]["GoalCreate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoalCreate"];
                };
            };
        };
    };
    v1_goals_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
        };
    };
    v1_goals_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Goal"];
                "application/x-www-form-urlencoded": components["schemas"]["Goal"];
                "multipart/form-data": components["schemas"]["Goal"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
        };
    };
    v1_goals_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_goals_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGoal"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGoal"];
                "multipart/form-data": components["schemas"]["PatchedGoal"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
        };
    };
    v1_goals_update_progress_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Goal"];
                "application/x-www-form-urlencoded": components["schemas"]["Goal"];
                "multipart/form-data": components["schemas"]["Goal"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
        };
    };
    v1_goals_active_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
        };
    };
    v1_goals_completed_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
        };
    };
    v1_goals_near_target_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
        };
    };
    v1_goals_summary_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
        };
    };
    v1_transactions_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTransactionList"];
                };
            };
        };
    };
    v1_transactions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["TransactionCreate"];
                "multipart/form-data": components["schemas"]["TransactionCreate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionCreate"];
                };
            };
        };
    };
    v1_transactions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    v1_transactions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Transaction"];
                "application/x-www-form-urlencoded": components["schemas"]["Transaction"];
                "multipart/form-data": components["schemas"]["Transaction"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    v1_transactions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_transactions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTransaction"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTransaction"];
                "multipart/form-data": components["schemas"]["PatchedTransaction"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    v1_transactions_recent_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    v1_transactions_summary_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    v1_user_change_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_user_delete_account_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_user_profile_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_user_profile_update_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
